{"version":3,"sources":["services/teams.js","services/players.js","services/trailingMeans.js","styling/colors.js","components/players/PlayerStats.js","services/playerStats.js","components/players/SelectPlayer.js","components/players/SelectSeasons.js","components/players/SelectRegularPost.js","components/players/SelectStats.js","images/ball_logov6.png","components/Logo.js","components/players/SelectTrailingAverage.js","components/players/Players.js","components/teams/SelectTeam.js","components/teams/TeamStats.js","components/teams/SelectSeason.js","components/teams/SelectRegularPost.js","components/teams/SelectPerTotal.js","components/teams/Teams.js","App.js","index.js"],"names":["teamService","getTeams","a","axios","get","teams","data","getTeamsFromDatabase","playerService","getPlayers","players","countTrailingMean","playerStats","statCategory","trailingGames","trailingAverage","i","length","statsInTrailingGames","j","mean","push","countTrailingMeanPct","attemptsInStatCategory","percentages","totalMadeBaskets","totalAttemptedBaskets","trailingPercentage","trailingMeanService","pts","ast","reb","blk","stl","turnover","min","map","playerStat","Number","split","pf","dreb","oreb","fg_pct","fg3_pct","ft_pct","fga","fgm","fg3a","fg3m","fta","ftm","colors","PlayerStats","startSeasonToShow","endSeasonToShow","postSeasonSelected","ptsSelected","astSelected","rebSelected","drebSelected","orebSelected","blkSelected","stlSelected","turnoverSelected","fgaSelected","fgmSelected","fg_pctSelected","fg3aSelected","fg3mSelected","fg3_pctSelected","ftaSelected","ftmSelected","ft_pctSelected","pfSelected","minSelected","selectedFirstSeason","selectedLastSeason","fetchingData","playerStatsFiltered","filter","game","postseason","seasons","season","startOfCareerSeason","Math","apply","endOfCareerSeason","max","games","labels","date","concat","find","team","id","visitor_team_id","abbreviation","home_team_id","datasets","label","fill","borderColor","lightGreyDot","pointBackgroundColor","showLine","hidden","lightGreyLine","pointRadius","brownDot","brownLine","oliveDot","oliveLine","tealDot","tealLine","navyDot","navyLine","redDot","redLine","orangeDot","orangeLine","yellowDot","yellowLine","limeDot","limeLine","greenDot","greenLine","cyanDot","cyanLine","blueDot","blueLine","purpleDot","purpleLine","magentaDot","magentaLine","greyDot","greyLine","pinkDot","pinkLine","apricotDot","apricotLine","beigeDot","beigeLine","mintDot","mintLine","Container","style","color","paddingLeft","Row","Col","type","height","width","player","first_name","last_name","className","options","legend","onClick","e","stopPropagation","display","scales","xAxes","ticks","baseUrl","playerStatService","getPlayerStatsFromApi","playerId","seasonsVariable","totalPages","meta","total_pages","console","log","playerStatsAllPages","page","playerStatsOnePage","getPlayerStatsFromDB","getTeamStatsFromDB","teamApiId","SelectPlayer","setSelectedPlayer","setPlayerStats","setFetchingData","playerSelect","fullName","value","getPlayerStats","playerFullName","searchedPlayer","apiId","then","response","sort","b","Date","getTime","onChange","option","placeholder","SelectSeasons","setSelectedFirstSeason","setSelectedLastSeason","seasonDescending","seasonSelectDescending","toString","seasonAscending","seasonSelectAscending","sm","event","handleSelectedFirstSeasonChange","closeMenuOnSelect","handleSelectedLastSeasonChange","SelectRegularPost","setRegularSeasonSelected","setPostSeasonSelected","useState","radioValue","setRadioValue","ButtonGroup","toggle","size","name","radio","idx","ToggleButton","variant","checked","currentTarget","handleRegularPostChange","SelectStats","setPtsSelected","setAstSelected","setRebSelected","setDrebSelected","setOrebSelected","setBlkSelected","setStlSelected","setTurnoverSelected","setFgaSelected","setFgmSelected","setFg_pctSelected","setFg3aSelected","setFg3mSelected","setFg3_pctSelected","setFtaSelected","setFtmSelected","setFt_pctSelected","setMinSelected","setPfSelected","cellWidth","Form","backgroundColor","Check","inline","Logo","logoSize","src","ball_logo","alt","SelectTrailingAverage","setTrailingAverage","require","config","Players","setPlayers","setTeams","selectedPlayer","regularSeasonSelected","useEffect","ReactGa","initialize","process","pageview","window","location","pathname","search","firstName","lastName","textAlign","xs","SelectTeam","setSelectedTeam","setTeamStats","selectedSeason","teamSelect","city","getTeamStats","teamName","searchedTeam","TeamStats","selectedTeam","teamStats","perGameSelected","totalSelected","teamStat","undefined","playerTotalStats","forEach","playerTotalStat","teamStatsFiltered","playedGames","totalPts","reduce","accumulator","currentValue","totalAst","totalReb","totalStl","totalBlk","totalTurnover","totalPf","totalMin","minutes","timeSplit","seconds","floor","isNaN","updatedPlayer","ptsPer","round","astPer","rebPer","stlPer","blkPer","turnoverPer","pfPer","minPer","s","fontColor","fontSize","position","plugins","render","optionsTotalPoints","title","text","optionsTotalAssists","optionsTotalRebounds","optionsTotalBlocks","optionsTotalSteals","optionsTotalTurnovers","optionsTotalPersonalFouls","optionsTotalMinutes","dataTotalPoints","slice","hoverOffset","dataTotalAssists","dataTotalRebounds","dataTotalBlocks","dataTotalSteals","dataTotalTurnovers","dataTotalPersonalFouls","dataTotalMinutes","optionsPerPoints","optionsPerAssists","optionsPerRebounds","optionsPerBlocks","optionsPerSteals","optionsPerTurnovers","optionsPerPersonalFouls","optionsPerMinutes","dataPerPoints","dataPerAssists","dataPerRebounds","dataPerBlocks","dataPerSteals","dataPerTurnovers","dataPerPersonalFouls","dataPerMinutes","SelectSeason","setSelectedSeason","handleSelectedSeasonChange","SelectPerTotal","setPerGameSelected","setTotalSelected","handlePerGameChange","Teams","App","flexDirection","alignContent","paddingTop","to","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1259200.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://www.balldontlie.io/api/v1/teams'\nconst baseUrlDB = '/api/teamsdb'\n\nconst getTeams = async () => {\n  const teams = await axios.get(`${baseUrl}`)\n  return teams.data\n}\n\nconst getTeamsFromDatabase = async () => {\n  const teams = await axios.get(`${baseUrlDB}`)\n  return teams.data\n}\n\nconst teamService = {getTeams, getTeamsFromDatabase}\n\nexport default teamService","import axios from 'axios'\n//const baseUrl = 'https://www.balldontlie.io/api/v1/players'\nconst baseUrl = '/api/players'\n\nconst getPlayers = async () => {\n  const players = await axios.get(baseUrl)\n  \n  return players.data\n}\n\nconst playerService = { getPlayers }\n\nexport default playerService","\nconst countTrailingMean = (playerStats, statCategory, trailingGames) => {\n  let trailingAverage = []\n  for (let i = 0; i < trailingGames; i++) {\n    trailingAverage[i] = null\n  }\n  for (let i = trailingGames; i < playerStats.length; i++) {\n    let statsInTrailingGames = 0\n    for (let j = 1; j <= trailingGames; j++) {\n      statsInTrailingGames += playerStats[i - trailingGames + j][statCategory];\n    }\n    const mean = statsInTrailingGames / trailingGames\n    trailingAverage.push(mean)\n  }\n  return trailingAverage\n}\n\nconst countTrailingMeanPct = (playerStats, statCategory, attemptsInStatCategory, trailingGames) => {\n  let percentages = []\n  for (let i = 0; i < trailingGames; i++) {\n    percentages[i] = null\n  }\n\n  for (let i = trailingGames; i < playerStats.length; i++) {\n    let totalMadeBaskets = 0\n    let totalAttemptedBaskets = 0\n    if (playerStats[i][attemptsInStatCategory] === 0) {\n      percentages.push(percentages[i - 1])\n      //playerStats[i][statCategory] = percentages[i - 1]\n    } else {\n      for (let j = 1; j <= trailingGames; j++) {\n        if (playerStats[i - trailingGames + j][attemptsInStatCategory] === 0\n          || playerStats[i - trailingGames + j][attemptsInStatCategory] < playerStats[i - trailingGames + j][statCategory]) {\n          continue\n        }\n        totalMadeBaskets += playerStats[i - trailingGames + j][statCategory]\n        totalAttemptedBaskets += playerStats[i - trailingGames + j][attemptsInStatCategory]\n      }\n      const trailingPercentage = totalMadeBaskets / totalAttemptedBaskets * 100\n      percentages.push(trailingPercentage)\n    }\n\n  }\n  return percentages\n}\n\nconst pts = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'pts', trailingGames)\n}\nconst ast = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'ast', trailingGames)\n}\nconst reb = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'reb', trailingGames)\n}\nconst blk = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'blk', trailingGames)\n}\nconst stl = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'stl', trailingGames)\n}\nconst turnover = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'turnover', trailingGames)\n}\nconst min = (playerStats, trailingGames) => {\n  playerStats = playerStats.map(playerStat => ({ ...playerStat, min: playerStat.min ? Number(playerStat.min.split(':')[0]) : null }))\n  return countTrailingMean(playerStats, 'min', trailingGames)\n}\nconst pf = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'pf', trailingGames)\n}\nconst dreb = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'dreb', trailingGames)\n}\nconst oreb = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'oreb', trailingGames)\n}\nconst fg_pct = (playerStats, trailingGames) => {\n  return countTrailingMeanPct(playerStats, 'fgm', 'fga', trailingGames)\n}\nconst fg3_pct = (playerStats, trailingGames) => {\n  return countTrailingMeanPct(playerStats, 'fg3m', 'fg3a', trailingGames)\n}\nconst ft_pct = (playerStats, trailingGames) => {\n  return countTrailingMeanPct(playerStats, 'ftm', 'fta', trailingGames)\n}\n/* const fg_pct = (playerStats) => {\n  return countPct(playerStats, 'fgm', 'fga')\n}\nconst fg3_pct = (playerStats) => {\n  return countPct(playerStats, 'fg3m', 'fg3a')\n}\nconst ft_pct = (playerStats) => {\n  return countPct(playerStats, 'ftm', 'fta')\n} */\nconst fga = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'fga', trailingGames)\n}\nconst fgm = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'fgm', trailingGames)\n}\nconst fg3a = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'fg3a', trailingGames)\n}\nconst fg3m = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'fg3m', trailingGames)\n}\nconst fta = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'fta', trailingGames)\n}\nconst ftm = (playerStats, trailingGames) => {\n  return countTrailingMean(playerStats, 'ftm', trailingGames)\n}\n\n\nconst trailingMeanService = {\n  pts,\n  ast,\n  reb,\n  blk,\n  stl,\n  turnover,\n  min,\n  pf,\n  dreb,\n  oreb,\n  fg_pct,\n  fg3_pct,\n  ft_pct,\n  fga,\n  fgm,\n  fg3a,\n  fg3m,\n  fta,\n  ftm\n}\n\nexport default trailingMeanService","const colors = {\n  'maroonDot': 'rgba(128,0,0,0.3)',\n  'maroonLine': 'rgba(128,0,0,1.0)',\n  'brownDot': 'rgba(170,110,40,0.3)',\n  'brownLine': 'rgba(170,110,40,1.0)',\n  'oliveDot': 'rgba(128,128,0,0.3)',\n  'oliveLine': 'rgba(128,128,0,1.0)',\n  'tealDot': 'rgba(0,128,128,0.3)',\n  'tealLine': 'rgba(0,128,128,1.0)',\n  'navyDot': 'rgba(0,0,128,0.3)',\n  'navyLine': 'rgba(0,0,128,1.0)',\n  'redDot': 'rgba(230,25,75,0.3)',\n  'redLine': 'rgba(230,25,75,1.0)',\n  'orangeDot': 'rgba(245,130,48,0.3)',\n  'orangeLine': 'rgba(245,130,48,1.0)',\n  'yellowDot': 'rgba(255,225,25,0.3)',\n  'yellowLine': 'rgba(255,225,25,1.0)',\n  'limeDot': 'rgba(210,245,60,0.3)',\n  'limeLine': 'rgba(210,245,60,1.0)',\n  'greenDot': 'rgba(60,180,75,0.3)',\n  'greenLine': 'rgba(60,180,75,1.0)',\n  'cyanDot': 'rgba(70,240,240,0.3)',\n  'cyanLine': 'rgba(70,240,240,1.0)',\n  'blueDot': 'rgba(0,130,200,0.3)',\n  'blueLine': 'rgba(0,130,200,1.0)',\n  'purpleDot': 'rgba(145,30,180,0.3)',\n  'purpleLine': 'rgba(145,30,180,1.0)',\n  'magentaDot': 'rgba(240,50,230,0.3)',\n  'magentaLine': 'rgba(240,50,230,1.0)',\n  'greyDot': 'rgba(128,128,128,0.3)',\n  'greyLine': 'rgba(128,128,128,1.0)',\n  'pinkDot': 'rgba(250,190,212,0.3)',\n  'pinkLine': 'rgba(250,190,212,1.0)',\n  'apricotDot': 'rgba(255,215,180,0.3)',\n  'apricotLine': 'rgba(255,215,180,1.0)',\n  'beigeDot': 'rgba(255,250,200,0.3)',\n  'beigeLine': 'rgba(255,250,200,1.0)',\n  'mintDot': 'rgba(170,255,195,0.3)',\n  'mintLine': 'rgba(170,255,195,1.0)',\n  'lavenderDot': 'rgba(220,190,255,0.3)',\n  'lavenderLine': 'rgba(220,190,255,1.0)',\n  'whiteDot': 'rgba(255,255,255,0.3)',\n  'whiteLine': 'rgba(255,255,255,1.0)',\n  'lightGreyDot': 'rgba(211,211,211,0.3)',\n  'lightGreyLine': 'rgba(211,211,211,1.0)'\n}\n\nexport default colors","import React from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport { Line } from 'react-chartjs-2'\nimport trailingMeanService from '../../services/trailingMeans'\nimport colors from '../../styling/colors'\nimport Loader from 'react-loader-spinner'\n//import Logo from '../components/Logo'\n\nconst PlayerStats = (\n  {\n    playerStats,\n    teams,\n    postSeasonSelected,\n    ptsSelected,\n    astSelected,\n    rebSelected,\n    drebSelected,\n    orebSelected,\n    blkSelected,\n    stlSelected,\n    turnoverSelected,\n    fgaSelected,\n    fgmSelected,\n    fg_pctSelected,\n    fg3aSelected,\n    fg3mSelected,\n    fg3_pctSelected,\n    ftaSelected,\n    ftmSelected,\n    ft_pctSelected,\n    pfSelected,\n    minSelected,\n    selectedFirstSeason,\n    selectedLastSeason,\n    fetchingData,\n    trailingAverage\n  }\n) => {\n\n  const options = {\n    //responsive: true,\n    /* maintainAspectRatio: false, */\n    //aspectRatio: 1,\n    legend: {\n      onClick: (e) => e.stopPropagation(),\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        ticks: {\n          display: false\n        }\n      }]\n    }\n  }\n\n  const playerStatsFiltered = playerStats.filter(playerStat => playerStat.game.postseason === postSeasonSelected)\n\n  const seasons = playerStatsFiltered.map(playerStat => playerStat.game.season)\n  const startOfCareerSeason = Math.min.apply(Math, seasons)\n  const endOfCareerSeason = Math.max.apply(Math, seasons)\n\n  let startSeasonToShow\n  let endSeasonToShow\n\n  if (selectedFirstSeason > startOfCareerSeason) {\n    startSeasonToShow = selectedFirstSeason\n  } else {\n    startSeasonToShow = startOfCareerSeason\n  }\n\n  if (selectedLastSeason < endOfCareerSeason) {\n    endSeasonToShow = selectedLastSeason\n  } else {\n    endSeasonToShow = endOfCareerSeason\n  }\n\n\n  const games = playerStatsFiltered.filter(playerStat => playerStat.game.season >= selectedFirstSeason && playerStat.game.season <= selectedLastSeason).length\n\n  //const postSeasonGames = playerStatsFiltered.filter(playerStat => playerStat.game.postseason === true).length\n\n  const data = {\n    labels: playerStatsFiltered\n      .filter(playerStat => playerStat.game.season >= selectedFirstSeason && playerStat.game.season <= selectedLastSeason)\n      .map(playerStat => playerStat.game.date.split('T')[0]\n        .concat('\\n')\n        .concat(teams.find(team => team.id === playerStat.game.visitor_team_id).abbreviation)\n        .concat('@')\n        .concat(teams.find(team => team.id === playerStat.game.home_team_id).abbreviation)\n        .concat(playerStat.game.postseason ? ' POST' : ' REG')),\n    datasets: [\n      {\n        //data: playerStats.map(playerStat => (playerStat.pts && playerStat.game.postseason === true)),\n        label: 'pts',\n        data: playerStatsFiltered.map(playerStat => playerStat.pts),\n        fill: false,\n        borderColor: colors.lightGreyDot,\n        pointBackgroundColor: colors.lightGreyDot,\n        showLine: false,\n        hidden: !ptsSelected\n      },\n      {\n        label: 'pts trailing mean',\n\n        fill: false,\n        borderColor: colors.lightGreyLine,\n        pointBackgroundColor: colors.lightGreyLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.pts(playerStatsFiltered, trailingAverage),\n        hidden: !ptsSelected\n      },\n      {\n        label: 'ast',\n        data: playerStatsFiltered.map(playerStat => playerStat.ast),\n        fill: false,\n        borderColor: colors.brownDot,\n        pointBackgroundColor: colors.brownDot,\n        showLine: false,\n        hidden: !astSelected\n      },\n      {\n        label: 'ast trailing mean',\n\n        fill: false,\n        borderColor: colors.brownLine,\n        pointBackgroundColor: colors.brownLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.ast(playerStatsFiltered, trailingAverage),\n        hidden: !astSelected\n      },\n      {\n        label: 'reb',\n        data: playerStatsFiltered.map(playerStat => playerStat.reb),\n        fill: false,\n        borderColor: colors.oliveDot,\n        pointBackgroundColor: colors.oliveDot,\n        showLine: false,\n        hidden: !rebSelected\n      },\n      {\n        label: 'reb trailing mean',\n\n        fill: false,\n        borderColor: colors.oliveLine,\n        pointBackgroundColor: colors.oliveLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.reb(playerStatsFiltered, trailingAverage),\n        hidden: !rebSelected\n      },\n      {\n        label: 'blk',\n        data: playerStatsFiltered.map(playerStat => playerStat.blk),\n        fill: false,\n        borderColor: colors.tealDot,\n        pointBackgroundColor: colors.tealDot,\n        showLine: false,\n        hidden: !blkSelected\n      },\n      {\n        label: 'blk trailing mean',\n\n        fill: false,\n        borderColor: colors.tealLine,\n        pointBackgroundColor: colors.tealLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.blk(playerStatsFiltered, trailingAverage),\n        hidden: !blkSelected\n      },\n      {\n        label: 'stl',\n        data: playerStatsFiltered.map(playerStat => playerStat.stl),\n        fill: false,\n        borderColor: colors.navyDot,\n        pointBackgroundColor: colors.navyDot,\n        showLine: false,\n        hidden: !stlSelected\n      },\n      {\n        label: 'stl trailing mean',\n\n        fill: false,\n        borderColor: colors.navyLine,\n        pointBackgroundColor: colors.navyLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.stl(playerStatsFiltered, trailingAverage),\n        hidden: !stlSelected\n      },\n      {\n        label: 'turnover',\n        data: playerStatsFiltered.map(playerStat => playerStat.turnover),\n        fill: false,\n        borderColor: colors.redDot,\n        pointBackgroundColor: colors.redDot,\n        showLine: false,\n        hidden: !turnoverSelected\n      },\n      {\n        label: 'turnover trailing mean',\n        fill: false,\n        borderColor: colors.redLine,\n        pointBackgroundColor: colors.redLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.turnover(playerStatsFiltered, trailingAverage),\n        hidden: !turnoverSelected\n      },\n      {\n        label: 'min',\n        data: playerStatsFiltered.map(playerStat => playerStat.min ? Number(playerStat.min.split(':')[0]) : null),\n        fill: false,\n        borderColor: colors.orangeDot,\n        pointBackgroundColor: colors.orangeDot,\n        showLine: false,\n        hidden: !minSelected\n      },\n      {\n        label: 'min trailing mean',\n        fill: false,\n        borderColor: colors.orangeLine,\n        pointBackgroundColor: colors.orangeLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.min(playerStatsFiltered, trailingAverage),\n        hidden: !minSelected\n      },\n      {\n        label: 'pf',\n        data: playerStatsFiltered.map(playerStat => playerStat.pf),\n        fill: false,\n        borderColor: colors.yellowDot,\n        pointBackgroundColor: colors.yellowDot,\n        showLine: false,\n        hidden: !pfSelected\n      },\n      {\n        label: 'pf trailing mean',\n        fill: false,\n        borderColor: colors.yellowLine,\n        pointBackgroundColor: colors.yellowLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.pf(playerStatsFiltered, trailingAverage),\n        hidden: !pfSelected\n      },\n      {\n        label: 'dreb',\n        data: playerStatsFiltered.map(playerStat => playerStat.dreb),\n        fill: false,\n        borderColor: colors.limeDot,\n        pointBackgroundColor: colors.limeDot,\n        showLine: false,\n        hidden: !drebSelected\n      },\n      {\n        label: 'dreb trailing mean',\n        fill: false,\n        borderColor: colors.limeLine,\n        pointBackgroundColor: colors.limeLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.dreb(playerStatsFiltered, trailingAverage),\n        hidden: !drebSelected\n      },\n      {\n        label: 'oreb',\n        data: playerStatsFiltered.map(playerStat => playerStat.oreb),\n        fill: false,\n        borderColor: colors.greenDot,\n        pointBackgroundColor: colors.greenDot,\n        showLine: false,\n        hidden: !orebSelected\n      },\n      {\n        label: 'oreb trailing mean',\n        fill: false,\n        borderColor: colors.greenLine,\n        pointBackgroundColor: colors.greenLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.oreb(playerStatsFiltered, trailingAverage),\n        hidden: !orebSelected\n      },\n      {\n        label: 'fg_pct',\n        data: playerStatsFiltered.map(playerStat => playerStat.fg_pct <= 1 ? playerStat.fg_pct * 100 : playerStat.fg_pct),\n        fill: false,\n        borderColor: colors.cyanDot,\n        pointBackgroundColor: colors.cyanDot,\n        showLine: false,\n        hidden: !fg_pctSelected\n      },\n      {\n        label: 'fg_pct trailing mean',\n        fill: false,\n        borderColor: colors.cyanLine,\n        pointBackgroundColor: colors.cyanLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.fg_pct(playerStatsFiltered\n          .map(playerStat => ({ ...playerStat, fg_pct: playerStat.fg_pct <= 1 ? playerStat.fg_pct * 100 : playerStat.fg_pct })), trailingAverage),\n        hidden: !fg_pctSelected\n      },\n      {\n        label: 'fg3_pct',\n        data: playerStatsFiltered.map(playerStat => playerStat.fg3_pct <= 1 ? playerStat.fg3_pct * 100 : playerStat.fg3_pct),\n        fill: false,\n        borderColor: colors.blueDot,\n        pointBackgroundColor: colors.blueDot,\n        showLine: false,\n        hidden: !fg3_pctSelected\n      },\n      {\n        label: 'fg3_pct trailing mean',\n        fill: false,\n        borderColor: colors.blueLine,\n        pointBackgroundColor: colors.blueLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.fg3_pct(playerStatsFiltered\n          .map(playerStat => ({ ...playerStat, fg3_pct: playerStat.fg3_pct <= 1 ? playerStat.fg3_pct * 100 : playerStat.fg3_pct })), trailingAverage),\n        hidden: !fg3_pctSelected\n      },\n      {\n        label: 'ft_pct',\n        data: playerStatsFiltered.map(playerStat => playerStat.ft_pct <= 1 ? playerStat.ft_pct * 100 : playerStat.ft_pct),\n        fill: false,\n        borderColor: colors.purpleDot,\n        pointBackgroundColor: colors.purpleDot,\n        showLine: false,\n        hidden: !ft_pctSelected\n      },\n      {\n        label: 'ft_pct trailing mean',\n        fill: false,\n        borderColor: colors.purpleLine,\n        pointBackgroundColor: colors.purpleLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.ft_pct(playerStatsFiltered\n          .map(playerStat => ({\n            ...playerStat,\n            ft_pct: (playerStat.ft_pct <= 1 ? playerStat.ft_pct * 100 : playerStat.ft_pct)\n          })), trailingAverage),\n        hidden: !ft_pctSelected\n      },\n      {\n        label: 'fga',\n        data: playerStatsFiltered.map(playerStat => playerStat.fga),\n        fill: false,\n        borderColor: colors.magentaDot,\n        pointBackgroundColor: colors.magentaDot,\n        showLine: false,\n        hidden: !fgaSelected\n      },\n      {\n        label: 'fga trailing mean',\n        fill: false,\n        borderColor: colors.magentaLine,\n        pointBackgroundColor: colors.magentaLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.fga(playerStatsFiltered,trailingAverage),\n        hidden: !fgaSelected\n      },\n      {\n        label: 'fgm',\n        data: playerStatsFiltered.map(playerStat => playerStat.fgm),\n        fill: false,\n        borderColor: colors.greyDot,\n        pointBackgroundColor: colors.greyDot,\n        showLine: false,\n        hidden: !fgmSelected\n      },\n      {\n        label: 'fgm trailing mean',\n        fill: false,\n        borderColor: colors.greyLine,\n        pointBackgroundColor: colors.greyLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.fgm(playerStatsFiltered,trailingAverage),\n        hidden: !fgmSelected\n      },\n      {\n        label: 'fg3a',\n        data: playerStatsFiltered.map(playerStat => playerStat.fg3a),\n        fill: false,\n        borderColor: colors.pinkDot,\n        pointBackgroundColor: colors.pinkDot,\n        showLine: false,\n        hidden: !fg3aSelected\n      },\n      {\n        label: 'fg3a trailing mean',\n        fill: false,\n        borderColor: colors.pinkLine,\n        pointBackgroundColor: colors.pinkLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.fg3a(playerStatsFiltered,trailingAverage),\n        hidden: !fg3aSelected\n      },\n      {\n        label: 'fg3m',\n        data: playerStatsFiltered.map(playerStat => playerStat.fg3m),\n        fill: false,\n        borderColor: colors.apricotDot,\n        pointBackgroundColor: colors.apricotDot,\n        showLine: false,\n        hidden: !fg3mSelected\n      },\n      {\n        label: 'fg3m trailing mean',\n        fill: false,\n        borderColor: colors.apricotLine,\n        pointBackgroundColor: colors.apricotLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.fg3m(playerStatsFiltered,trailingAverage),\n        hidden: !fg3mSelected\n      },\n      {\n        label: 'fta',\n        data: playerStatsFiltered.map(playerStat => playerStat.fta),\n        fill: false,\n        borderColor: colors.beigeDot,\n        pointBackgroundColor: colors.beigeDot,\n        showLine: false,\n        hidden: !ftaSelected\n      },\n      {\n        label: 'fta trailing mean',\n        fill: false,\n        borderColor: colors.beigeLine,\n        pointBackgroundColor: colors.beigeLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.fta(playerStatsFiltered,trailingAverage),\n        hidden: !ftaSelected\n      },\n      {\n        label: 'ftm',\n        data: playerStatsFiltered.map(playerStat => playerStat.ftm),\n        fill: false,\n        borderColor: colors.mintDot,\n        pointBackgroundColor: colors.mintDot,\n        showLine: false,\n        hidden: !ftmSelected\n      },\n      {\n        label: 'ftm trailing mean',\n        fill: false,\n        borderColor: colors.mintLine,\n        pointBackgroundColor: colors.mintLine,\n        showLine: true,\n        pointRadius: 0,\n        data: trailingMeanService.ftm(playerStatsFiltered,trailingAverage),\n        hidden: !ftmSelected\n      },\n    ],\n  }\n\n  return (\n    <div>\n      <Container style={{ color: 'white', paddingLeft: '30px' }}>\n        <Row>\n          {fetchingData\n            ? <Col>\n              <Loader type=\"Grid\" color=\"white\" height=\"25\" width=\"25\" />\n              <br></br>\n            </Col>\n            : <>\n              <Col>\n                <div>\n                  {playerStats[0].player.first_name} {playerStats[0].player.last_name}, {startSeasonToShow} - {endSeasonToShow}, {games} games\n              </div>\n              </Col>\n            </>}\n        </Row>\n      </Container>\n      <div className='chart'>\n        <Line\n          data={data}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default PlayerStats","import axios from 'axios'\nconst baseUrl = 'https://www.balldontlie.io/api/v1/stats'\nconst baseUrlDB = '/api/statsdb/statsfromdb'\nconst baseUrlDBTeam = '/api/statsdb/teamstatsfromdb'\n\nconst getPlayerStatsFromApi = async (seasons, playerId) => {\n  //console.log('seasons to api', seasons)\n  let seasonsVariable = ''\n\n  for (let i = 0; i < seasons.length; i++) {\n    seasonsVariable += '&seasons[]='\n    seasonsVariable += seasons[i]\n\n  }\n  //console.log('seasonsVariable', seasonsVariable)\n\n  const playerStats = await axios.get(`${baseUrl}?seasons[]=${seasonsVariable}&player_ids[]=${playerId}&per_page=100`)\n  //playerStats.sort((a, b) => a.game.date - b.game.date)\n  const totalPages = playerStats.data.meta.total_pages\n  console.log('totalPages', totalPages)\n\n  let playerStatsAllPages = []\n\n  for (let page = 1; page <= totalPages; page++) {\n    console.log('getting stats from page', page)\n    const playerStatsOnePage = await axios\n      .get(`${baseUrl}?seasons[]=${seasonsVariable}&player_ids[]=${playerId}&per_page=100&page=${page}`)\n    playerStatsAllPages = playerStatsAllPages.concat(playerStatsOnePage.data.data)\n  }\n  console.log(playerStatsAllPages)\n  //return playerStats.data\n  return playerStatsAllPages\n}\n\nconst getPlayerStatsFromDB = async (/* seasons, */ playerId/* , regularSeasonSelected, postSeasonSelected */) => {\n  /* let seasonHelper = ''\n  seasons.forEach(season => {\n    seasonHelper += `${season},`\n  }) */\n\n  //console.log('seasonHelper', seasonHelper)\n  //const playerStats = await axios.get(`${baseUrlDB}/${playerId}/${seasonHelper}/${regularSeasonSelected}/${postSeasonSelected}`)\n  //const playerStats = await axios.get(`${baseUrlDB}/${playerId}/${seasonHelper}`)\n  const playerStats = await axios.get(`${baseUrlDB}/${playerId}`)\n  return playerStats\n}\n\nconst getTeamStatsFromDB = async (teamApiId, season) => {\n  const playerStats = await axios.get(`${baseUrlDBTeam}/${teamApiId}/${season}`)\n  return playerStats\n}\n\nconst playerStatService = { getPlayerStatsFromApi, getPlayerStatsFromDB, getTeamStatsFromDB }\n\nexport default playerStatService\n","import Select from 'react-select'\nimport playerStatService from '../../services/playerStats'\n\nconst SelectPlayer = ({ players, setSelectedPlayer, setPlayerStats, setFetchingData }) => {\n\n  const playerSelect = players.map(player => ({ label: player.fullName, value: player.fullName }))\n\n  const handleSelectedPlayerChange = (playerFullName) => {\n    setSelectedPlayer(playerFullName)\n    getPlayerStats(playerFullName)\n  }\n\n  const getPlayerStats = (playerFullName) => {\n    setFetchingData(true)\n    const searchedPlayer = players.find(player => player.fullName === playerFullName)\n    //console.log('searched player', searchedPlayer)\n    playerStatService.getPlayerStatsFromDB(searchedPlayer.apiId)\n      .then((response) => {\n        setPlayerStats(response.data.sort((a, b) =>\n          new Date(a.game.date).getTime() - new Date(b.game.date).getTime())\n        )\n        setFetchingData(false)\n      })\n\n  }\n  return (\n    <div>\n      <Select\n        options={playerSelect}\n        onChange={(option) => handleSelectedPlayerChange(option.value)}\n        placeholder='Select player'\n      />\n    </div>\n  )\n}\n\nexport default SelectPlayer","import Select from 'react-select'\nimport { /* Container,  */Row, Col } from 'react-bootstrap'\n\nconst SelectSeasons = ({\n  selectedFirstSeason,\n  selectedLastSeason,\n  setSelectedFirstSeason,\n  setSelectedLastSeason\n}) => {\n\n  let seasonDescending = 2020\n  const seasonSelectDescending = []\n  while (seasonDescending >= 1979) {\n    seasonSelectDescending.push({ label: seasonDescending.toString(), value: seasonDescending.toString() })\n    seasonDescending--\n  }\n\n  let seasonAscending = 1979\n  const seasonSelectAscending = []\n  while (seasonAscending <= 2020) {\n    seasonSelectAscending.push({ label: seasonAscending.toString(), value: seasonAscending.toString() })\n    seasonAscending++\n  }\n\n  const handleSelectedFirstSeasonChange = (event) => {\n    if (event.value > selectedLastSeason) {\n      setSelectedFirstSeason(selectedLastSeason)\n      setSelectedLastSeason(event.value)\n    } else {\n      setSelectedFirstSeason(event.value)\n    }\n  }\n\n  const handleSelectedLastSeasonChange = (event) => {\n    if (event.value < selectedFirstSeason) {\n      setSelectedLastSeason(selectedFirstSeason)\n      setSelectedFirstSeason(event.value)\n    } else {\n      setSelectedLastSeason(event.value)\n    }\n  }\n\n  return (\n    <>\n      <Row>\n        <Col sm={4}></Col>\n        <Col sm={4}>\n          <Select\n            options={seasonSelectAscending}\n            /* onChange={(event) => setSelectedFirstSeason(event.value)} */\n            onChange={(event) => handleSelectedFirstSeasonChange(event)}\n            closeMenuOnSelect={true}\n            placeholder={selectedFirstSeason.toString()}\n          />\n        </Col>\n        <Col sm={4}></Col>\n      </Row>\n      <Row>\n        <Col sm={4}></Col>\n        <Col sm={4}>\n          <Select\n            options={seasonSelectDescending}\n            /* onChange={(event) => setSelectedLastSeason(event.value)} */\n            onChange={(event) => handleSelectedLastSeasonChange(event)}\n            closeMenuOnSelect={true}\n            placeholder={selectedLastSeason}\n          />\n        </Col>\n        <Col sm={4}></Col>\n      </Row>\n    </>\n  )\n}\n\nexport default SelectSeasons","\nimport { ButtonGroup, ToggleButton } from 'react-bootstrap'\nimport { useState } from 'react'\n\nconst SelectRegularPost = ({ setRegularSeasonSelected, setPostSeasonSelected }) => {\n\n  const [radioValue, setRadioValue] = useState('1');\n\n  const radios = [\n    { name: 'regular', value: '1' },\n    { name: 'post', value: '2' }\n  ];\n\n  const handleRegularPostChange = (e) => {\n    if (e.currentTarget.value === '1') {\n      setRegularSeasonSelected(true)\n      setPostSeasonSelected(false)\n    }\n    if (e.currentTarget.value === '2') {\n      setRegularSeasonSelected(false)\n      setPostSeasonSelected(true)\n    }\n    setRadioValue(e.currentTarget.value)\n  }\n\n  return (\n    <>\n      <ButtonGroup toggle size=\"md\">\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            type=\"radio\"\n            variant=\"outline-secondary\"\n            name=\"radio\"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => handleRegularPostChange(e)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n      {/* test to check that states change correctly */}\n      {/* <div style={{ color: 'white' }}>\n        <p>reg: {regularSeasonSelected.toString()}</p>\n        <p>post: {postSeasonSelected.toString()}</p>\n      </div> */}\n    </>\n  )\n}\n\nexport default SelectRegularPost","import { Form } from 'react-bootstrap'\nimport React from 'react'\nimport colors from '../../styling/colors'\n//import { AllCheckerCheckbox, Checkbox, CheckboxGroup } from '@createnl/grouped-checkboxes'\n\nconst SelectStats = (\n  {\n    ptsSelected,\n    setPtsSelected,\n    astSelected,\n    setAstSelected,\n    rebSelected,\n    setRebSelected,\n    drebSelected,\n    setDrebSelected,\n    orebSelected,\n    setOrebSelected,\n    blkSelected,\n    setBlkSelected,\n    stlSelected,\n    setStlSelected,\n    turnoverSelected,\n    setTurnoverSelected,\n    fgaSelected,\n    setFgaSelected,\n    fgmSelected,\n    setFgmSelected,\n    fg_pctSelected,\n    setFg_pctSelected,\n    fg3aSelected,\n    setFg3aSelected,\n    fg3mSelected,\n    setFg3mSelected,\n    fg3_pctSelected,\n    setFg3_pctSelected,\n    ftaSelected,\n    setFtaSelected,\n    ftmSelected,\n    setFtmSelected,\n    ft_pctSelected,\n    setFt_pctSelected,\n    pfSelected,\n    minSelected,\n    setMinSelected,\n    setPfSelected\n  }\n) => {\n\n  const cellWidth = 100\n\n  return (\n    <div style={{ color: 'white' }}>\n      <Form>\n        <table>\n          <tbody>\n            <tr>\n              <td style={{ width: cellWidth, backgroundColor: colors.lightGreyLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setPtsSelected(!ptsSelected)}\n                  type=\"checkbox\"\n                  label=\"pts\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.brownLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setAstSelected(!astSelected)}\n                  type=\"checkbox\"\n                  label=\"ast\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.oliveLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setRebSelected(!rebSelected)}\n                  type=\"checkbox\"\n                  label=\"reb\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.tealLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setBlkSelected(!blkSelected)}\n                  type=\"checkbox\"\n                  label=\"blk\" />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </Form>\n      {/* <br></br> */}\n      <Form>\n        <table>\n          <tbody>\n            <tr>\n              <td style={{ width: cellWidth, backgroundColor: colors.navyLine/* , color:'black' */ }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setStlSelected(!stlSelected)}\n                  type=\"checkbox\"\n                  label=\"stl\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.redLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setTurnoverSelected(!turnoverSelected)}\n                  type=\"checkbox\"\n                  label=\"to\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.yellowLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setPfSelected(!pfSelected)}\n                  type=\"checkbox\"\n                  label=\"pf\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.orangeLine }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setMinSelected(!minSelected)}\n                  type=\"checkbox\"\n                  label=\"min\" />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </Form>\n      {/* <br></br> */}\n      <Form>\n        <table>\n          <tbody>\n            <tr>\n              <td style={{ width: cellWidth, backgroundColor: colors.cyanLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setFg_pctSelected(!fg_pctSelected)}\n                  type=\"checkbox\"\n                  label=\"fg_pct\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.magentaLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setFgaSelected(!fgaSelected)}\n                  type=\"checkbox\"\n                  label=\"fga\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.greyLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setFgmSelected(!fgmSelected)}\n                  type=\"checkbox\"\n                  label=\"fgm\" />\n              </td>\n            </tr>\n\n          </tbody>\n        </table>\n      </Form>\n      {/* <br></br> */}\n      <Form>\n        <table>\n          <tbody>\n            <tr>\n              <td style={{ width: cellWidth, backgroundColor: colors.blueLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setFg3_pctSelected(!fg3_pctSelected)}\n                  type=\"checkbox\"\n                  label=\"fg3_pct\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.pinkLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setFg3aSelected(!fg3aSelected)}\n                  type=\"checkbox\"\n                  label=\"fg3a\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.apricotLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setFg3mSelected(!fg3mSelected)}\n                  type=\"checkbox\"\n                  label=\"fg3m\" />\n              </td>\n            </tr>\n\n          </tbody>\n        </table>\n      </Form>\n      {/* <br></br> */}\n      <Form>\n        <table>\n          <tbody>\n            <tr>\n              <td style={{ width: cellWidth, backgroundColor: colors.purpleLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setFt_pctSelected(!ft_pctSelected)}\n                  type=\"checkbox\"\n                  label=\"ft_pct\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.beigeLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setFtaSelected(!ftaSelected)}\n                  type=\"checkbox\"\n                  label=\"fta\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.mintLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setFtmSelected(!ftmSelected)}\n                  type=\"checkbox\"\n                  label=\"ftm\" />\n              </td>\n            </tr>\n\n          </tbody>\n        </table>\n      </Form>\n      {/* <br></br> */}\n      <Form>\n        <table>\n          <tbody>\n            <tr>\n              <td style={{ width: cellWidth, backgroundColor: colors.limeLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setDrebSelected(!drebSelected)}\n                  type=\"checkbox\"\n                  label=\"dreb\" />\n              </td>\n              <td style={{ width: cellWidth, backgroundColor: colors.greenLine, color: 'black' }}>\n                <Form.Check\n                  inline={true}\n                  onChange={() => setOrebSelected(!orebSelected)}\n                  type=\"checkbox\"\n                  label=\"oreb\" />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </Form>\n      <br></br>\n      {/* test to check that the states change correctly */}\n      {/* <p>pts: {ptsSelected.toString()}</p>\n      <p>ast:{astSelected.toString()}</p>\n      <p>reb:{rebSelected.toString()}</p>\n      <p>blk:{blkSelected.toString()}</p>\n      <p>stl:{stlSelected.toString()}</p>\n      <p>turnover:{turnoverSelected.toString()}</p>\n      <p>min:{minSelected.toString()}</p>\n      <p>pf:{pfSelected.toString()}</p>\n      <br></br>\n      <p>dreb:{drebSelected.toString()}</p>\n      <p>oreb:{orebSelected.toString()}</p>\n      <br></br>\n      <p>fg_pct:{fg_pctSelected.toString()}</p>\n      <p>fg3_pct:{fg3_pctSelected.toString()}</p>\n      <p>ft_pct:{ft_pctSelected.toString()}</p>\n      <br></br>\n      <p>fga:{fgaSelected.toString()}</p>\n      <p>fgm:{fgmSelected.toString()}</p>\n      <p>fg3a:{fg3aSelected.toString()}</p>\n      <p>fg3m:{fg3mSelected.toString()}</p>\n      <p>fta:{ftaSelected.toString()}</p>\n      <p>ftm:{ftmSelected.toString()}</p> */}\n    </div>\n  )\n}\n\nexport default SelectStats","export default __webpack_public_path__ + \"static/media/ball_logov6.16f028e6.png\";","import ball_logo from '../images/ball_logov6.png'\n\n\nconst Logo = () => {\n\nconst logoSize = '150px'\n\n  return (\n    <img\n      /* class=\"card-img-top mb-3 w-auto\" */\n      src={ball_logo}\n      alt='ball_logo'\n      style={{\n        width: logoSize,\n        height: logoSize\n      }} />\n  )\n}\n\nexport default Logo","\nimport { ButtonGroup, ToggleButton } from 'react-bootstrap'\nimport { useState } from 'react'\n\nconst SelectTrailingAverage = ({ setTrailingAverage }) => {\n\n  const [radioValue, setRadioValue] = useState('25');\n\n  const radios = [\n    { name: '5', value: '5' },\n    { name: '10', value: '10' },\n    { name: '25', value: '25' },\n    { name: '50', value: '50' },\n    { name: '100', value: '100' },\n  ];\n\n  const handleRegularPostChange = (e) => {\n    /* if (e.currentTarget.value === '1') {\n      setRegularSeasonSelected(true)\n      setPostSeasonSelected(false)\n    }\n    if (e.currentTarget.value === '2') {\n      setRegularSeasonSelected(false)\n      setPostSeasonSelected(true)\n    } */\n    setRadioValue(e.currentTarget.value)\n    setTrailingAverage(Number(e.currentTarget.value))\n  }\n\n  return (\n    <>\n      <ButtonGroup toggle size=\"md\">\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            type=\"radio\"\n            variant=\"outline-secondary\"\n            name=\"radio\"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => handleRegularPostChange(e)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n      {/* test to check that states change correctly */}\n      {/* <div style={{ color: 'white' }}>\n        <p>reg: {regularSeasonSelected.toString()}</p>\n        <p>post: {postSeasonSelected.toString()}</p>\n      </div> */}\n    </>\n  )\n}\n\nexport default SelectTrailingAverage","import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport teamService from '../../services/teams'\nimport playerService from '../../services/players'\nimport PlayerStats from './PlayerStats'\nimport SelectPlayer from './SelectPlayer'\nimport SelectSeasons from './SelectSeasons'\n//import GetStats from './components/GetStats'\nimport SelectRegularPost from './SelectRegularPost'\nimport SelectStats from './SelectStats'\nimport Logo from '../Logo'\nimport SelectTrailingAverage from './SelectTrailingAverage'\n/* import Instructions from './Instructions'\nimport Tips from './Tips' */\nimport Loader from 'react-loader-spinner'\nimport ReactGa from 'react-ga'\nrequire('dotenv').config()\n\n\nconst Players = ({ fetchingData, setFetchingData }) => {\n\n  const [players, setPlayers] = useState([])\n  const [playerStats, setPlayerStats] = useState([])\n  const [teams, setTeams] = useState([])\n  const [selectedPlayer, setSelectedPlayer] = useState('')\n  const [selectedFirstSeason, setSelectedFirstSeason] = useState(1979)\n  const [selectedLastSeason, setSelectedLastSeason] = useState(2020)\n  const [regularSeasonSelected, setRegularSeasonSelected] = useState(true)\n  const [postSeasonSelected, setPostSeasonSelected] = useState(false)\n\n  const [ptsSelected, setPtsSelected] = useState(false)\n  const [astSelected, setAstSelected] = useState(false)\n  const [rebSelected, setRebSelected] = useState(false)\n  const [drebSelected, setDrebSelected] = useState(false)\n  const [orebSelected, setOrebSelected] = useState(false)\n  const [blkSelected, setBlkSelected] = useState(false)\n  const [stlSelected, setStlSelected] = useState(false)\n  const [turnoverSelected, setTurnoverSelected] = useState(false)\n  const [fgaSelected, setFgaSelected] = useState(false)\n  const [fgmSelected, setFgmSelected] = useState(false)\n  const [fg_pctSelected, setFg_pctSelected] = useState(false)\n  const [fg3aSelected, setFg3aSelected] = useState(false)\n  const [fg3mSelected, setFg3mSelected] = useState(false)\n  const [fg3_pctSelected, setFg3_pctSelected] = useState(false)\n  const [ftaSelected, setFtaSelected] = useState(false)\n  const [ftmSelected, setFtmSelected] = useState(false)\n  const [ft_pctSelected, setFt_pctSelected] = useState(false)\n  const [pfSelected, setPfSelected] = useState(false)\n  const [minSelected, setMinSelected] = useState(false)\n\n\n\n  const [trailingAverage, setTrailingAverage] = useState(25)\n\n  useEffect(() => {\n\n    ReactGa.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS_TRACKING_CODE)\n    ReactGa.pageview(window.location.pathname + window.location.search)\n    //console.log('pathname:', window.location.pathname)\n\n    teamService.getTeams()\n      .then((response) => {\n        setTeams(response.data)\n      })\n    //Player sorting should be done in the database query?\n    playerService.getPlayers()\n      .then((response) => {\n        setPlayers(response.map(player => ({ ...player, fullName: `${player.firstName} ${player.lastName}` }))\n          .sort((a, b) => (a.lastName > b.lastName) ? 1 : ((b.lastName > a.lastName) ? -1 : 0)))\n      })\n  }, [])\n\n  return (\n    <>\n      <Row>\n        <Col sm={4}></Col>\n        <Col sm={4}>\n          <SelectPlayer\n            players={players}\n            setSelectedPlayer={setSelectedPlayer}\n            setPlayerStats={setPlayerStats}\n            fetchingData={fetchingData}\n            setFetchingData={setFetchingData}\n          />\n        </Col>\n        <Col sm={4}></Col>\n      </Row>\n      {selectedPlayer !== ''\n        ? <>\n          <SelectSeasons\n            setSelectedFirstSeason={setSelectedFirstSeason}\n            setSelectedLastSeason={setSelectedLastSeason}\n            selectedFirstSeason={selectedFirstSeason}\n            selectedLastSeason={selectedLastSeason}\n          />\n        </>\n        : <></>}\n\n      <br></br>\n      {playerStats.length === 0 && !fetchingData\n        ? <>\n          <Row style={{ textAlign: 'center' }}>\n            <Col sm={5} xs={1}></Col>\n            <Col sm={2} xs={10}>\n              <br></br>\n              <Logo />\n            </Col>\n            <Col sm={5} xs={1}></Col>\n          </Row>\n          <br></br>\n        </>\n        : <></>}\n      <Row style={{ textAlign: 'center' }}>\n        <Col sm={5} xs={4}></Col>\n        <Col sm={2} xs={4}>\n          {fetchingData && playerStats.length === 0\n            ? <>\n              <br></br>\n              <Loader type=\"Grid\" color=\"white\" height=\"75\" width=\"75\" />\n              <br></br>\n              <br></br>\n            </>\n            : <></>}\n        </Col>\n        <Col sm={5} xs={4}></Col>\n      </Row>\n      {selectedPlayer !== ''\n        ? <>\n          <Row className=\"justify-content-md-center\">\n            <Col>\n              {playerStats.length > 0\n                ? <PlayerStats\n                  playerStats={playerStats}\n                  teams={teams}\n                  regularSeasonSelected={regularSeasonSelected}\n                  postSeasonSelected={postSeasonSelected}\n                  ptsSelected={ptsSelected}\n                  astSelected={astSelected}\n                  rebSelected={rebSelected}\n                  drebSelected={drebSelected}\n                  orebSelected={orebSelected}\n                  blkSelected={blkSelected}\n                  stlSelected={stlSelected}\n                  turnoverSelected={turnoverSelected}\n                  fgaSelected={fgaSelected}\n                  fgmSelected={fgmSelected}\n                  fg_pctSelected={fg_pctSelected}\n                  fg3aSelected={fg3aSelected}\n                  fg3mSelected={fg3mSelected}\n                  fg3_pctSelected={fg3_pctSelected}\n                  ftaSelected={ftaSelected}\n                  ftmSelected={ftmSelected}\n                  ft_pctSelected={ft_pctSelected}\n                  pfSelected={pfSelected}\n                  minSelected={minSelected}\n                  selectedFirstSeason={selectedFirstSeason}\n                  selectedLastSeason={selectedLastSeason}\n                  fetchingData={fetchingData}\n                  trailingAverage={trailingAverage}\n                />\n                : <></>}</Col>\n          </Row>\n          <br></br>\n          <Row >\n            <Col sm={4} ></Col>\n            <Col sm={4} >\n              <SelectStats\n                ptsSelected={ptsSelected}\n                setPtsSelected={setPtsSelected}\n                astSelected={astSelected}\n                setAstSelected={setAstSelected}\n                rebSelected={rebSelected}\n                setRebSelected={setRebSelected}\n                drebSelected={drebSelected}\n                setDrebSelected={setDrebSelected}\n                orebSelected={orebSelected}\n                setOrebSelected={setOrebSelected}\n                blkSelected={blkSelected}\n                setBlkSelected={setBlkSelected}\n                stlSelected={stlSelected}\n                setStlSelected={setStlSelected}\n                turnoverSelected={turnoverSelected}\n                setTurnoverSelected={setTurnoverSelected}\n                fgaSelected={fgaSelected}\n                setFgaSelected={setFgaSelected}\n                fgmSelected={fgmSelected}\n                setFgmSelected={setFgmSelected}\n                fg_pctSelected={fg_pctSelected}\n                setFg_pctSelected={setFg_pctSelected}\n                fg3aSelected={fg3aSelected}\n                setFg3aSelected={setFg3aSelected}\n                fg3mSelected={fg3mSelected}\n                setFg3mSelected={setFg3mSelected}\n                fg3_pctSelected={fg3_pctSelected}\n                setFg3_pctSelected={setFg3_pctSelected}\n                ftaSelected={ftaSelected}\n                setFtaSelected={setFtaSelected}\n                ftmSelected={ftmSelected}\n                setFtmSelected={setFtmSelected}\n                ft_pctSelected={ft_pctSelected}\n                setFt_pctSelected={setFt_pctSelected}\n                pfSelected={pfSelected}\n                setPfSelected={setPfSelected}\n                minSelected={minSelected}\n                setMinSelected={setMinSelected} />\n            </Col>\n            <Col sm={4}></Col>\n          </Row>\n          <Row>\n            <Col sm={4}></Col>\n            <Col sm={4}>\n              <div style={{ color: 'white' }}>trailing average</div>\n              <SelectTrailingAverage\n                setTrailingAverage={setTrailingAverage} />\n            </Col>\n            <Col sm={4}></Col>\n          </Row>\n          <br></br>\n          <Row>\n            <Col sm={4}></Col>\n            <Col sm={4}>\n              <SelectRegularPost\n                regularSeasonSelected={regularSeasonSelected}\n                postSeasonSelected={postSeasonSelected}\n                setRegularSeasonSelected={setRegularSeasonSelected}\n                setPostSeasonSelected={setPostSeasonSelected}\n              />\n            </Col>\n            <Col sm={4}></Col>\n          </Row>\n        </>\n        : <></>}\n      <br></br>\n      <br></br>\n      {/* <Row float='center'>\n        <Col sm={2} xs={1}></Col>\n        <Col sm={8} xs={10}>\n          <Instructions />\n        </Col>\n        <Col sm={2} xs={1}></Col>\n      </Row>\n      <br></br>\n      <Row float='center'>\n        <Col sm={2} xs={1}></Col>\n        <Col sm={8} xs={10}>\n          <Tips />\n        </Col>\n        <Col sm={2} xs={1}></Col>\n      </Row> */}\n    </>\n  )\n}\n\nexport default Players","import Select from 'react-select'\nimport playerStatService from '../../services/playerStats'\n\nconst SelectTeam = ({ teams, setSelectedTeam, setTeamStats, setFetchingData, selectedSeason }) => {\n\n  //const playerSelect = players.map(player => ({ label: player.fullName, value: player.fullName }))\n\n  const teamSelect = teams.map(team => ({ label: `${team.city} ${team.name}`, value: team.name }))\n\n  const handleSelectedTeamChange = (teamName) => {\n    setSelectedTeam(teamName)\n    getTeamStats(teamName)\n  }\n\n  const getTeamStats = (teamName) => {\n    setFetchingData(true)\n    const searchedTeam = teams.find(team => team.name === teamName)\n    playerStatService.getTeamStatsFromDB(searchedTeam.apiId, selectedSeason)\n      .then((response) => {\n        setTeamStats(response.data.sort((a, b) =>\n          new Date(a.game.date).getTime() - new Date(b.game.date).getTime())\n        )\n        setFetchingData(false)\n      })\n\n  }\n  return (\n    <div>\n      <Select\n        options={teamSelect}\n        onChange={(option) => handleSelectedTeamChange(option.value)}\n        placeholder='Select team'\n      />\n    </div>\n  )\n}\n\nexport default SelectTeam","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { Doughnut } from 'react-chartjs-2'\n/* import trailingMeanService from '../../services/trailingMeans'\nimport colors from '../../styling/colors'\nimport Loader from 'react-loader-spinner' */\n//import Logo from '../components/Logo'\nimport 'chartjs-plugin-labels'\nimport colors from '../../styling/colors'\n\nconst TeamStats = (\n  {\n    selectedTeam,\n    teamStats,\n    postSeasonSelected,\n    perGameSelected,\n    totalSelected\n  }\n) => {\n\n  //filter out bad data where player is not defined\n  teamStats = teamStats.filter(teamStat => teamStat.player !== undefined)\n\n  let playerTotalStats = []\n\n  teamStats.forEach(teamStat => {\n    const playerFullName = `${teamStat.player.first_name} ${teamStat.player.last_name}`\n    if (playerTotalStats.find(playerTotalStat => playerTotalStat.name === playerFullName) === undefined) {\n      const player = { name: playerFullName }\n      playerTotalStats.push(player)\n    }\n  })\n\n  const teamStatsFiltered = teamStats.filter(teamStat => teamStat.game.postseason === postSeasonSelected)\n\n  playerTotalStats.forEach(playerTotalStat => {\n    let playedGames = 0\n    const playerStats = teamStatsFiltered\n      .filter(teamStat => `${teamStat.player.first_name} ${teamStat.player.last_name}` === playerTotalStat.name)\n\n    const totalPts = playerStats.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue.pts\n    }, 0)\n    const totalAst = playerStats.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue.ast\n    }, 0)\n    const totalReb = playerStats.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue.reb\n    }, 0)\n    const totalStl = playerStats.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue.stl\n    }, 0)\n    const totalBlk = playerStats.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue.blk\n    }, 0)\n    const totalTurnover = playerStats.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue.turnover\n    }, 0)\n    const totalPf = playerStats.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue.pf\n    }, 0)\n    const totalMin = playerStats.reduce((accumulator, currentValue) => {\n      let minutes = 0\n      const timeSplit = currentValue.min.split(':')\n      if (timeSplit.length === 1) {\n        minutes = Number(currentValue.min)\n      } else {\n        const seconds = Number(timeSplit[0]) * 60 + Number(timeSplit[1])\n        minutes = Math.floor(seconds / 60)\n      }\n      if (isNaN(minutes)) {\n        minutes = 0\n      }\n      if (minutes !== 0) {\n        playedGames++\n      }\n      return accumulator + minutes\n    }, 0)\n\n    const updatedPlayer = playerTotalStat\n    updatedPlayer.pts = totalPts\n    updatedPlayer.ast = totalAst\n    updatedPlayer.reb = totalReb\n    updatedPlayer.stl = totalStl\n    updatedPlayer.blk = totalBlk\n    updatedPlayer.turnover = totalTurnover\n    updatedPlayer.pf = totalPf\n    updatedPlayer.min = totalMin\n\n    updatedPlayer.ptsPer = Math.round(totalPts / playedGames * 10) / 10\n    updatedPlayer.astPer = Math.round(totalAst / playedGames * 10) / 10\n    updatedPlayer.rebPer = Math.round(totalReb / playedGames * 10) / 10\n    updatedPlayer.stlPer = Math.round(totalStl / playedGames * 10) / 10\n    updatedPlayer.blkPer = Math.round(totalBlk / playedGames * 10) / 10\n    updatedPlayer.turnoverPer = Math.round(totalTurnover / playedGames * 10) / 10\n    updatedPlayer.pfPer = Math.round(totalPf / playedGames * 10) / 10\n    updatedPlayer.minPer = Math.round(totalMin / playedGames * 10) / 10\n\n    playerTotalStats = playerTotalStats.map(s => s.name === playerTotalStat.name ? updatedPlayer : s)\n  })\n\n\n  const legend = {\n    labels: {\n      fontColor: 'white',\n      fontSize: 12\n    },\n    position: 'right'\n  }\n\n  const plugins = {\n    labels: {\n      render: 'value',\n      fontSize: 14,\n      fontColor: 'black'\n    }\n  }\n\n  const optionsTotalPoints = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Total points',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsTotalAssists = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Total assists',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsTotalRebounds = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Total rebounds',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsTotalBlocks = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Total blocks',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsTotalSteals = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Total steals',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsTotalTurnovers = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Total turnovers',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsTotalPersonalFouls = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Total fouls',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsTotalMinutes = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Total minutes',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n\n  const dataTotalPoints = {\n    labels: playerTotalStats\n      .sort((a, b) => b.pts - a.pts)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Total points',\n      data: playerTotalStats\n        .sort((a, b) => b.pts - a.pts)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.pts),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataTotalAssists = {\n    labels: playerTotalStats\n      .sort((a, b) => b.ast - a.ast)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Total assists',\n      data: playerTotalStats\n        .sort((a, b) => b.ast - a.ast)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.ast),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataTotalRebounds = {\n    labels: playerTotalStats\n      .sort((a, b) => b.reb - a.reb)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Total rebounds',\n      data: playerTotalStats\n        .sort((a, b) => b.reb - a.reb)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.reb),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataTotalBlocks = {\n    labels: playerTotalStats\n      .sort((a, b) => b.blk - a.blk)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Total blocks',\n      data: playerTotalStats\n        .sort((a, b) => b.blk - a.blk)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.blk),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataTotalSteals = {\n    labels: playerTotalStats\n      .sort((a, b) => b.stl - a.stl)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Total steals',\n      data: playerTotalStats\n        .sort((a, b) => b.stl - a.stl)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.stl),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataTotalTurnovers = {\n    labels: playerTotalStats\n      .sort((a, b) => b.turnover - a.turnover)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Total turnovers',\n      data: playerTotalStats\n        .sort((a, b) => b.turnover - a.turnover)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.turnover),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataTotalPersonalFouls = {\n    labels: playerTotalStats\n      .sort((a, b) => b.pf - a.pf)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Total personal fouls',\n      data: playerTotalStats\n        .sort((a, b) => b.pf - a.pf)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.pf),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataTotalMinutes = {\n    labels: playerTotalStats\n      .sort((a, b) => b.min - a.min)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Total minutes',\n      data: playerTotalStats\n        .sort((a, b) => b.min - a.min)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.min),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n\n\n\n\n\n\n\n\n\n\n  const optionsPerPoints = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Points per game',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsPerAssists = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Assists per game',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsPerRebounds = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Rebounds per game',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsPerBlocks = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Blocks per game',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsPerSteals = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Steals per game',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsPerTurnovers = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Turnovers per game',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsPerPersonalFouls = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Fouls per game',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n  const optionsPerMinutes = {\n    legend: legend,\n    plugins: plugins,\n    title: {\n      display: true,\n      text: 'Minutes per game',\n      fontSize: 16,\n      fontColor: 'white'\n    }\n  }\n\n  const dataPerPoints = {\n    labels: playerTotalStats\n      .sort((a, b) => b.ptsPer - a.ptsPer)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Points per game',\n      data: playerTotalStats\n        .sort((a, b) => b.ptsPer - a.ptsPer)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.ptsPer),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataPerAssists = {\n    labels: playerTotalStats\n      .sort((a, b) => b.astPer - a.astPer)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Assists per game',\n      data: playerTotalStats\n        .sort((a, b) => b.astPer - a.astPer)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.astPer),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataPerRebounds = {\n    labels: playerTotalStats\n      .sort((a, b) => b.rebPer - a.rebPer)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Rebounds per game',\n      data: playerTotalStats\n        .sort((a, b) => b.rebPer - a.rebPer)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.rebPer),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataPerBlocks = {\n    labels: playerTotalStats\n      .sort((a, b) => b.blkPer - a.blkPer)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Blocks per game',\n      data: playerTotalStats\n        .sort((a, b) => b.blkPer - a.blkPer)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.blkPer),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataPerSteals = {\n    labels: playerTotalStats\n      .sort((a, b) => b.stlPer - a.stlPer)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Steals per game',\n      data: playerTotalStats\n        .sort((a, b) => b.stlPer - a.stlPer)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.stlPer),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataPerTurnovers = {\n    labels: playerTotalStats\n      .sort((a, b) => b.turnoverPer - a.turnoverPer)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Turnovers per game',\n      data: playerTotalStats\n        .sort((a, b) => b.turnoverPer - a.turnoverPer)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.turnoverPer),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataPerPersonalFouls = {\n    labels: playerTotalStats\n      .sort((a, b) => b.pfPer - a.pfPer)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Personal fouls per game',\n      data: playerTotalStats\n        .sort((a, b) => b.pfPer - a.pfPer)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.pfPer),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n  const dataPerMinutes = {\n    labels: playerTotalStats\n      .sort((a, b) => b.minPer - a.minPer)\n      .slice(0, 5)\n      .map(playerTotalStat => playerTotalStat.name),\n    datasets: [{\n      label: 'Minutes per game',\n      data: playerTotalStats\n        .sort((a, b) => b.minPer - a.minPer)\n        .slice(0, 5)\n        .map(playerTotalStat => playerTotalStat.minPer),\n      backgroundColor: [\n        colors.orangeLine,\n        colors.yellowLine,\n        colors.greenLine,\n        colors.magentaLine,\n        colors.cyanLine,\n      ],\n      hoverOffset: 4\n    }]\n  }\n\n\n\n\n\n\n\n  return (\n    <div>\n      <div className='chart'>\n        {teamStats.length > 0 && totalSelected\n          ? <>\n            <Row>\n              <Col sm={4}>\n              </Col>\n              {/* <br></br> */}\n              <Col sm={4}>\n              </Col>\n              <Col sm={4}>\n              </Col>\n            </Row>\n            <br></br>\n            <br></br>\n            <br></br>\n            <Row>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataTotalPoints}\n                  options={optionsTotalPoints}\n                />\n              </Col>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataTotalAssists}\n                  options={optionsTotalAssists}\n                />\n              </Col>\n            </Row>\n            <br></br>\n            <br></br>\n            <br></br>\n            <Row>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataTotalRebounds}\n                  options={optionsTotalRebounds}\n                />\n              </Col>\n\n              <Col sm={6}>\n                <Doughnut\n                  data={dataTotalBlocks}\n                  options={optionsTotalBlocks}\n                />\n              </Col>\n            </Row>\n            <br></br>\n            <br></br>\n            <br></br><Row>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataTotalSteals}\n                  options={optionsTotalSteals}\n                />\n              </Col>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataTotalTurnovers}\n                  options={optionsTotalTurnovers}\n                />\n              </Col>\n            </Row>\n            <br></br>\n            <br></br>\n            <br></br><Row>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataTotalPersonalFouls}\n                  options={optionsTotalPersonalFouls}\n                />\n              </Col>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataTotalMinutes}\n                  options={optionsTotalMinutes}\n                />\n              </Col>\n            </Row>\n          </>\n          : <></>}\n\n\n        {teamStats.length > 0 && perGameSelected\n          ? <>\n            <Row>\n              <Col sm={4}>\n              </Col>\n              {/* <br></br> */}\n              <Col sm={4}>\n              </Col>\n              <Col sm={4}>\n              </Col>\n            </Row>\n            <br></br>\n            <br></br>\n            <br></br>\n            <Row>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataPerPoints}\n                  options={optionsPerPoints}\n                />\n              </Col>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataPerAssists}\n                  options={optionsPerAssists}\n                />\n              </Col>\n            </Row>\n            <br></br>\n            <br></br>\n            <br></br>\n            <Row>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataPerRebounds}\n                  options={optionsPerRebounds}\n                />\n              </Col>\n\n              <Col sm={6}>\n                <Doughnut\n                  data={dataPerBlocks}\n                  options={optionsPerBlocks}\n                />\n              </Col>\n            </Row>\n            <br></br>\n            <br></br>\n            <br></br><Row>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataPerSteals}\n                  options={optionsPerSteals}\n                />\n              </Col>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataPerTurnovers}\n                  options={optionsPerTurnovers}\n                />\n              </Col>\n            </Row>\n            <br></br>\n            <br></br>\n            <br></br><Row>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataPerPersonalFouls}\n                  options={optionsPerPersonalFouls}\n                />\n              </Col>\n              <Col sm={6}>\n                <Doughnut\n                  data={dataPerMinutes}\n                  options={optionsPerMinutes}\n                />\n              </Col>\n            </Row>\n          </>\n          : <></>}\n\n\n\n\n      </div>\n    </div >\n  )\n}\n\nexport default TeamStats","import Select from 'react-select'\nimport playerStatService from '../../services/playerStats'\n\n\nconst SelectSeason = ({\n  selectedSeason,\n  setSelectedSeason,\n  selectedTeam,\n  setTeamStats,\n  teams,\n  fetchingData,\n  setFetchingData\n}) => {\n\n  let seasonDescending = 2020\n  const seasonSelectDescending = []\n  while (seasonDescending >= 1979) {\n    seasonSelectDescending.push({ label: seasonDescending.toString(), value: seasonDescending.toString() })\n    seasonDescending--\n  }\n\n\n\n  const handleSelectedSeasonChange = (event) => {\n    setSelectedSeason(event.value)\n    setFetchingData(true)\n    const searchedTeam = teams.find(team => team.name === selectedTeam)\n    playerStatService.getTeamStatsFromDB(searchedTeam.apiId, event.value)\n      .then((response) => {\n        setTeamStats(response.data.sort((a, b) =>\n          new Date(a.game.date).getTime() - new Date(b.game.date).getTime())\n        )\n        setFetchingData(false)\n      })\n  }\n\n  return (\n    <>\n      <Select\n        options={seasonSelectDescending}\n        //onChange={(event) => setSelectedSeason(event.value)}\n        onChange={(event) => handleSelectedSeasonChange(event)}\n        closeMenuOnSelect={true}\n        placeholder={selectedSeason}\n      />\n\n    </>\n  )\n}\n\nexport default SelectSeason","\nimport { ButtonGroup, ToggleButton } from 'react-bootstrap'\nimport { useState } from 'react'\n\nconst SelectRegularPost = ({ setRegularSeasonSelected, setPostSeasonSelected }) => {\n\n  const [radioValue, setRadioValue] = useState('1');\n\n  const radios = [\n    { name: 'regular', value: '1' },\n    { name: 'post', value: '2' }\n  ];\n\n  const handleRegularPostChange = (e) => {\n    if (e.currentTarget.value === '1') {\n      setRegularSeasonSelected(true)\n      setPostSeasonSelected(false)\n    }\n    if (e.currentTarget.value === '2') {\n      setRegularSeasonSelected(false)\n      setPostSeasonSelected(true)\n    }\n    setRadioValue(e.currentTarget.value)\n  }\n\n  return (\n    <>\n      <ButtonGroup toggle size=\"md\">\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            type=\"radio\"\n            variant=\"outline-secondary\"\n            name=\"radio\"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => handleRegularPostChange(e)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n      {/* test to check that states change correctly */}\n      {/* <div style={{ color: 'white' }}>\n        <p>reg: {regularSeasonSelected.toString()}</p>\n        <p>post: {postSeasonSelected.toString()}</p>\n      </div> */}\n    </>\n  )\n}\n\nexport default SelectRegularPost","\nimport { ButtonGroup, ToggleButton } from 'react-bootstrap'\nimport { useState } from 'react'\n\nconst SelectPerTotal = ({ setPerGameSelected, setTotalSelected }) => {\n\n  const [radioValue, setRadioValue] = useState('1');\n\n  const radios = [\n    { name: 'per game', value: '1' },\n    { name: 'total', value: '2' }\n  ];\n\n  const handlePerGameChange = (e) => {\n    if (e.currentTarget.value === '1') {\n      setPerGameSelected(true)\n      setTotalSelected(false)\n    }\n    if (e.currentTarget.value === '2') {\n      setPerGameSelected(false)\n      setTotalSelected(true)\n    }\n    setRadioValue(e.currentTarget.value)\n  }\n\n  return (\n    <>\n      <ButtonGroup toggle size=\"md\">\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            type=\"radio\"\n            variant=\"outline-secondary\"\n            name=\"radio\"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => handlePerGameChange(e)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n      {/* test to check that states change correctly */}\n      {/* <div style={{ color: 'white' }}>\n        <p>reg: {regularSeasonSelected.toString()}</p>\n        <p>post: {postSeasonSelected.toString()}</p>\n      </div> */}\n    </>\n  )\n}\n\nexport default SelectPerTotal","import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport SelectTeam from './SelectTeam'\nimport TeamStats from './TeamStats'\nimport SelectSeason from './SelectSeason'\nimport SelectRegularPost from './SelectRegularPost'\nimport SelectPerTotal from './SelectPerTotal'\nimport teamService from '../../services/teams'\nimport Loader from 'react-loader-spinner'\nimport Logo from '../Logo'\nimport ReactGa from 'react-ga'\nrequire('dotenv').config()\n\nconst Teams = ({ fetchingData, setFetchingData }) => {\n\n  const [teams, setTeams] = useState([])\n  const [selectedTeam, setSelectedTeam] = useState('')\n  const [teamStats, setTeamStats] = useState([])\n  const [selectedSeason, setSelectedSeason] = useState(2020)\n  const [regularSeasonSelected, setRegularSeasonSelected] = useState(true)\n  const [postSeasonSelected, setPostSeasonSelected] = useState(false)\n  const [perGameSelected, setPerGameSelected] = useState(true)\n  const [totalSelected, setTotalSelected] = useState(false)\n\n  useEffect(() => {\n\n    ReactGa.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS_TRACKING_CODE)\n    ReactGa.pageview(window.location.pathname + window.location.search)\n    //console.log('pathname:', window.location.pathname)\n\n    teamService.getTeamsFromDatabase()\n      .then((response) => {\n        //console.log(response)\n        setTeams(response)\n      })\n  }, [])\n\n  return (\n    <div>\n      <Row>\n        <Col sm={4}></Col>\n        <Col sm={4}>\n          <SelectTeam\n            teams={teams}\n            setSelectedTeam={setSelectedTeam}\n            setTeamStats={setTeamStats}\n            setFetchingData={setFetchingData}\n            selectedSeason={selectedSeason}\n          />\n        </Col>\n        <Col sm={4}>\n          {selectedTeam !== ''\n            ? <SelectPerTotal\n              setPerGameSelected={setPerGameSelected}\n              setTotalSelected={setTotalSelected}\n            />\n\n            : <></>}\n\n        </Col>\n      </Row>\n      {selectedTeam !== ''\n        ? <Row>\n          <Col sm={4}></Col>\n          <Col sm={4}>\n            <SelectSeason\n              selectedSeason={selectedSeason}\n              setSelectedSeason={setSelectedSeason}\n              selectedTeam={selectedTeam}\n              setTeamStats={setTeamStats}\n              teams={teams}\n              setFetchingData={setFetchingData}\n            />\n          </Col>\n          <Col sm={4}>\n            <SelectRegularPost\n              regularSeasonSelected={regularSeasonSelected}\n              postSeasonSelected={postSeasonSelected}\n              setRegularSeasonSelected={setRegularSeasonSelected}\n              setPostSeasonSelected={setPostSeasonSelected}\n            />\n          </Col>\n        </Row>\n        : <>\n          <br></br>\n          <br></br>\n          <Row style={{ textAlign: 'center' }}>\n            <Col sm={4}></Col>\n            <Col sm={4}>\n              <Logo />\n            </Col>\n            <Col sm={4}></Col>\n          </Row>\n\n        </>}\n      {fetchingData ? <>\n        <Row style={{ textAlign: 'center' }}>\n          <Col sm={4}></Col>\n          <Col sm={4}>\n            <br></br>\n            <Loader type=\"Grid\" color=\"white\" height=\"75\" width=\"75\" />\n          </Col>\n          <Col sm={4}></Col>\n        </Row>\n      </>\n        : <></>}\n      {/* <Row> */}\n\n      <TeamStats\n        selectedTeam={selectedTeam}\n        teamStats={teamStats}\n        postSeasonSelected={postSeasonSelected}\n        perGameSelected={perGameSelected}\n        totalSelected={totalSelected}\n      />\n\n      {/* </Row> */}\n    </div>\n  )\n}\n\nexport default Teams","import React, { useState } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\n//import NavigationBar from './components/NavigationBar'\nimport Players from './components/players/Players'\nimport Teams from './components/teams/Teams'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link\n  /*  Redirect,\n   useRouteMatch,\n   Redirect,\n   useHistory */\n} from 'react-router-dom'\n\nfunction App() {\n\n  const [fetchingData, setFetchingData] = useState(false)\n\n  return (\n    <Router>\n      <div style={{\n        backgroundColor: \"#17202A\",\n        height: '300vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center'/* ,\n        textAlign: 'center' */\n      }}>\n        <div className=\"container\" style={{ paddingTop: '2vh', backgroundColor: \"#17202A\" }} >\n          <Container>\n            {/* <Row>\n              <Col sm={2}></Col>\n              <Col sm={8}>\n                <NavigationBar />\n              </Col>\n              <Col sm={2}></Col>\n            </Row> */}\n            <Row>\n              <Col sm={4}></Col>\n              <Col sm={1} xs={3}>\n                <Link to='/players'>players</Link>\n              </Col>\n              <Col sm={1} xs={3}>\n                <Link to='/teams'>teams</Link>\n              </Col>\n              <Col sm={4}></Col>\n            </Row>\n            <br></br>\n            <Switch>\n              <Route path='/players'>\n                <Players\n                  fetchingData={fetchingData}\n                  setFetchingData={setFetchingData}\n                />\n              </Route>\n              <Route path='/teams'>\n                <Teams\n                  fetchingData={fetchingData}\n                  setFetchingData={setFetchingData}\n                />\n              </Route>\n              <Route path='/'>\n                <Redirect to='/players' />\n              </Route>\n            </Switch>\n            <br></br>\n\n          </Container>\n        </div>\n      </div >\n    </Router >\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}